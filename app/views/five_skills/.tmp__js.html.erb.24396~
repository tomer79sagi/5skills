<script type="text/javascript">


var g_server_url = 'http://<%= request.env["HTTP_HOST"] %>/';
var ajax_action_queue = new Array();
var org_types = {
	company: <%= Fs2Organisation::ORGANISATION_TYPES[:company] %>,
	agency: <%= Fs2Organisation::ORGANISATION_TYPES[:agency] %>}

<% if is_binders %>

	var source_options = {
		
		<% i = 0 %>
		<% params[:field_data].each do |field_data_key, field_data_value| %>
			<%= "," if i > 0 %>
			<%= field_data_key %>: [ <%= field_data_value %> ]
			<% i+= 1 %>
		<% end %>
		
		};
<% end %>
		
$(document).ready(function() {
	
	<% if flash[:notice] %>
		$("#message_notice").show('slow');
	<% end %>
	
	<% if flash[:error] %>
		$("#message_error").show('slow');
	<% end %>
	
	<% if is_binders %>
		
		<% params[:field_binders].each do |field_binder_key, field_binder_value| %>
		
			bind_field("<%= field_binder_value[:field_name] %>",
				"<%= field_binder_value[:ajax_call] %>",
				source_options.<%= field_binder_value[:data_type] %>, {
					<% if field_binder_value[:field_id] %>
						id_field: "<%= field_binder_value[:field_id] %>",
					<% end %>
					comma_suffix: <%= field_binder_value[:comma_suffix] %>,
					include_image: <%= field_binder_value[:include_image] %>});
					
		<% end %>
		
		$( "#sortable" ).sortable();
		$( "#sortable" ).bind("sortstop", function(event, ui) {
				var a_skills_ids = $('[id^="skill_"]');
				var current_skill, prev_skill = null;
				var element;
				var k = 1;
				
				for (j=0 ; j<a_skills_ids.length ; ++j) {
					element = $("#" + a_skills_ids[j].id);
					current_skill = element.attr("id").split("-")[0].split("_")[1];
	
					if (prev_skill && current_skill != prev_skill) { k++; }
					element.attr("name", element.attr("name").replace(/(\[skill_)([0-9]*)(\])/, "$1" + k + "$3"));
					
	//				alert('prev, curr: ' + prev_skill + ", " + current_skill + " | " + k);
	
					prev_skill = current_skill;
				}
				
				ajax_it('<%= params[:default_search_ajax_call] %>');
			});
		$( "#sortable" ).disableSelection();
	
	<% end %>
	
	$( "#accordion" ).accordion({
		<% if !params[:show_hidden_fields] %>
			active: 1,
		<% end %>
		collapsible: true
	});
	
	$( "#user_type" ).buttonset();
	
	$.ajaxSetup({
	    beforeSend: function (xhr) {
	            xhr.setRequestHeader("Accept", "application/json, text/javascript, text/html, application/xml, text/xml, */*");
	    }
	});
});

// **************************************************

function help() {
	var help_options_1 = { Next: 1, Close: false }
	var help_options_2 = { Prev: -1, Next: 1, Close: false }
	var help_options_3 = { Prev: -1, Close: false }
	var help_options_4 = { Close: false }
	
	var tourSubmitFunc = function(e,v,m,f){
				if(v === -1){
					$.prompt.prevState();
					return false;
				}
				else if(v === 1){
					$.prompt.nextState();
					return false;
				}
	},
	tourStates = [
		{
			html: 'Welcome to jQuery Impromptu, lets take a quick tour of the plugin.',
			buttons: help_options_4,
			focus: 1,
			position: { container: '#skill_1-name', x: 10, y: 45, width: 200, arrow: 'tc' },
			submit: tourSubmitFunc
		}
	];
	$.prompt(tourStates, { opacity: 0.3 });
}

function bind_field(field_name, ajax_action, field_source, flags) {
	$( "#" + field_name )
			// don't navigate away from the field on tab when selecting an item
			.bind( "keydown", function( event ) {
				if ( event.keyCode === $.ui.keyCode.TAB &&
						$( this ).data( "autocomplete" ).menu.active ) {
					event.preventDefault();
				}
			})
			.autocomplete({
				minLength: 0,
				source: function( request, response ) {
					// delegate back to autocomplete, but extract the last term
					response( $.ui.autocomplete.filter(
						field_source, extractLast( request.term ) ) );
				},
				focus: function( event, ui ) {
					// prevent value inserted on focus
					$( "#" + flags.id_field ).val( ui.item.value );
					
					return false;
				},
				select: function( event, ui ) {
					var terms = split( this.value );
					// remove the current input
					terms.pop();
					// add the selected item
					terms.push( ui.item.value );
					
					if (flags && flags.id_field) { $( "#" + flags.id_field ).val( ui.item.id ); }
					
					// add placeholder to get the comma-and-space at the end
					if (flags && flags.comma_suffix && flags.comma_suffix == true) { terms.push( "" ); }
					
					this.value = terms.join( ", " );
					
					// Finally, run the search
					if (ajax_action != "") { ajax_it(ajax_action); }
					
					return false;
				}
			})
			.data( "autocomplete" )._renderItem = function( ul, item ) {
				if (flags && flags.include_image && flags.include_image == true) {
					return $( "<li></li>" )
						.data( "item.autocomplete", item )
						.append( "<a style='width:250px;'>" +  
							'<img style="vertical-align:middle;" src="' + g_server_url + 'file/' + item.file_id + '/show" ' + 
							'width="' + item.width + '" ' + 
							'height="' + item.height + '">&nbsp;' + item.value  + "</a>" )
						.appendTo( ul );
				} else {
					return $( "<li></li>" )
						.data( "item.autocomplete", item )
						.append( "<a>" + item.value  + "</a>" )
						.appendTo( ul );
				}
			}
			;
}

function split( val ) {
	return val.split( /,\s*/ );
}

function extractLast( term ) {
	return split( term ).pop();
}

function _REQ_search_jobs(){
	var json_arr = {};
	
	json_arr.skills_profile = parse_five_skills();
	
	return {action: "job/search", data: json_arr};
}

function _RES_search_jobs(data, status_i) {
	var a_job_seeker;
	h_results = {};
	
	// Remove elements
	$("#results_table tr:not([id='results_row_titles'])").remove();
	
	// Add new rows
	for (job in data.results) {
		$("#results_table tbody:last").append(
			create_job_result_row_as_html(data.results[job]));
	}
}

function _REQ_search_job_seekers(){
	var json_arr = {};
	
	json_arr.skills_profile = parse_five_skills();
	
	return {action: "job_seeker/search", data: json_arr};
}

function _RES_search_job_seekers(data, status_i) {
	var a_job_seeker;
	h_results = {};
	
	// Remove elements
	$("#results_table tr:not([id='results_row_titles'])").remove();
	
	// Add new rows
	for (job_seeker in data.results) {
		$("#results_table tbody:last").append(
			create_job_seeker_result_row_as_html(data.results[job_seeker]));
	}
}

function _REQ_create_template(){
	var json_arr = {};
	
	json_arr.template_name = $("#create_template-name").val();
	json_arr.skills_profile = parse_five_skills();
	
	return {action: "template/create", data: json_arr};
}

function _RES_create_template(data, status_i) {
	
}

function _REQ_view_company_summary() {
	var json_arr = {};
	
	json_arr.organisation_id = $("#search_company-id").val();
	
	return {action: "company/view/summary", data: json_arr};
}

function view_organisation_summary(data, org_type) {
	if (data.files[id_text == null]) { return; }
	
	var id_text;
	
	if (org_type == org_types['company']) {
		id_text = "company_logo";
	} else if (org_type == org_types['agency']) {
		id_text = "agency_logo";
	}
	
	if (data.files[id_text]["id"] == null || data.files[id_text]["id"] == "") { return; }
	
	var img = '<img src="' + g_server_url + 'file/' + data.files[id_text]["id"] + '/show" ';
	var def_lrg_dimensions = "<%= Fs2File::IMAGE_JOB_SEEKER_PLACEHOLDER_SIZES[:large] %>".split("x");
	var width = def_lrg_dimensions[0];
	var height = def_lrg_dimensions[1];
	
	if (data.files[id_text]["large_dimensions"]) {
		if (data.files[id_text]["large_dimensions"]["width"]) {
			width = data.files[id_text]["large_dimensions"]["width"];
		}
		
		if (data.files[id_text]["large_dimensions"]["height"]) {
			height = data.files[id_text]["large_dimensions"]["height"];
		}
	}
	
	img += 'width="' + width + '" ' +
		'height="' + height + '" ' + '">';
	
	$("#" + id_text).html(img);
}

function _RES_view_company_summary(data, status_i) {
	view_organisation_summary(data, <%= Fs2Organisation::ORGANISATION_TYPES[:company] %>);
}

function _REQ_view_agency_summary() {
	var json_arr = {};
	
	json_arr.organisation_id = $("#search_agency-id").val();
	
	return {action: "agency/view/summary", data: json_arr};
}

function _RES_view_agency_summary(data, status_i) {
	view_organisation_summary(data, <%= Fs2Organisation::ORGANISATION_TYPES[:agency] %>);
}

function _REQ_view_template(){
	var json_arr = {};
	
	json_arr.template_id = $("#search_template-id").val();
	
	return {action: "template/view", data: json_arr};
}

function _RES_view_template(data, status_i) {
	if (data.skills_profile_matrix) {
		populate_skills_fields(data.skills_profile_matrix);
	}
}

function _REQ_view_template_and_search(){
	return {ajax_actions: ["view_template", "<%= params[:default_search_ajax_call] %>"]};
}

function push_ajax_action(s_action) {
	ajax_action_queue.push(s_action);
}

function push_ajax_actions(a_actions) {
	ajax_action_queue = ajax_action_queue.concat(a_actions);
}

function pop_ajax_action() {
	return ajax_action_queue.shift();
}

function clear_skills_fields() {
	var skill_prefix = "skill_";
	var element_prefix ="[name='skills_profile";
	var element_suffix ="']";
		
	for (i = 1; i <= 5; ++i) {
		skill_element_prefix = element_prefix + "[" + skill_prefix + i + "]";
		
		$(skill_element_prefix + "[name]" + element_suffix).val("");
		$(skill_element_prefix + "[years_experience]" + element_suffix).val("");
		$(skill_element_prefix + "[self_rate]" + element_suffix).val("");
		$(skill_element_prefix + "[details]" + element_suffix).val("");	
	}
	
	$(element_prefix + "[additional_requirements]" + element_suffix).val("");
}

function populate_skills_fields(skills_profile_matrix) {
	var skill_prefix = "skill_";
	var element_prefix ="[name='skills_profile";
	var element_suffix ="']";
		
	for (i = 1; i <= 5; ++i) {
		skill_element_prefix = element_prefix + "[" + skill_prefix + i + "]";
		
		$(skill_element_prefix + "[name]" + element_suffix).val(skills_profile_matrix[skill_prefix + i].name);
		$(skill_element_prefix + "[years_experience]" + element_suffix).val(skills_profile_matrix[skill_prefix + i].years_experience);
		$(skill_element_prefix + "[self_rate]" + element_suffix).val(skills_profile_matrix[skill_prefix + i].self_rate);
		$(skill_element_prefix + "[details]" + element_suffix).val(skills_profile_matrix[skill_prefix + i].details);	
	}
	
	$(element_prefix + "[additional_requirements]" + element_suffix).val(skills_profile_matrix["additional_requirements"]);	
}

function add_message(message) {
	$.floatingMessage(message, {  
        time:3000
    });
}

function parse_five_skills() {
	var skill_prefix = "skill_";
	var skills_profile = {};
	var element_prefix;
	
	for (i=1 ; i<=5 ; ++i) {
		element_prefix ="[name='skills_profile[" + skill_prefix + i + "]";
		
		skills_profile[skill_prefix + i] = {};
		skills_profile[skill_prefix + i].name = $(element_prefix + "[name]']").val();
		skills_profile[skill_prefix + i].years_experience = $(element_prefix + "[years_experience]']").val();
		skills_profile[skill_prefix + i].self_rate = $(element_prefix + "[self_rate]']").val();
		skills_profile[skill_prefix + i].details = $(element_prefix + "[details]']").val();
	}
	
	skills_profile["additional_requirements"] = $("#additional_requirements").val();
	
	return skills_profile;
}

function create_job_result_row_as_html(js_result){
	return create_result_row_as_html(js_result, 1);
}

function create_job_seeker_result_row_as_html(js_result){
	return create_result_row_as_html(js_result, 2);
}	

//
// 'entity_type': {:job => 1, :job_seeker => 2}
//
function create_result_row_as_html(js_result, entity_type){
	var js_id = js_result[0];
	var js_data = js_result[1];
	
	var tr_row_start = '<tr id="' + js_id + '">';
	var tr_row_end = '</tr>';
	var td_images = '';
	
	if (entity_type == 1) { // job
	
		var s_link_start = '<a href="' + g_server_url + 'job/' + js_id + '/view">';
		var s_link_end = '</a>';
		
		td_images += '<td id="' + js_id + '-company_logo" style="text-align:left;">';
		
		if (js_data.files.company_logo) {		
			var a_small_dimensions = [32, 32];
			
			if (js_data.files.company_logo.small_dimensions) {
				a_small_dimensions = js_data.files.company_logo.small_dimensions.split('x');
			} 
			
			td_images += 
				s_link_start + 
				'<img src="' + g_server_url + 'file/' + js_data.files.company_logo.id + '/show" ' + 
				'width="' + a_small_dimensions[0] + '" ' + 
				'height="' + a_small_dimensions[1] + '">' +
				s_link_end;
		}
		
		if (js_data.files.agency_logo) {
			var a_small_dimensions = [32, 32];
			
			if (js_data.files.agency_logo.small_dimensions) {
				a_small_dimensions = js_data.files.agency_logo.small_dimensions.split('x');
			} 
			
			td_images += 
				s_link_start +
				'<img src="' + g_server_url + 'file/' + js_data.files.agency_logo.id + '/show" ' + 
				'width="' + a_small_dimensions[0] + '" ' + 
				'height="' + a_small_dimensions[1] + '">' +
				s_link_end;
		}
		
		td_images += '</td>';
	
	} else if (entity_type == 2) { // job_seeker
	
		if (js_data.files.profile_photo) {
			var a_small_dimensions = [32, 32];
			
			if (js_data.files.profile_photo.small_dimensions) {
				a_small_dimensions = js_data.files.profile_photo.small_dimensions.split('x');
			} 
			
			td_images += 
				'<td id="' + js_id + '-profile_photo" style="text-align:left;">' +
				'<img src="' + g_server_url + 'file/' + js_data.files.profile_photo.id + '/show" ' + 
				'width="' + a_small_dimensions[0] + '" ' + 
				'height="' + a_small_dimensions[1] + '">' + '</td>'
		}
		
	}
	
	if (td_images == '') { td_images = '<td></td>'; }

	var td_matched_skills = '<td id="' + js_id + '-skills" style="text-align:left;">' + js_data.matched_skills + '</td>'
	var td_matched_skills_details = '<td id="' + js_id + '-skill_details" style="text-align:left;">' + js_data.matched_skill_details + '</td>'
	var td_matched_additional_requirements = '<td id="' + js_id + '-additional_requirements" style="text-align:left;">' + js_data.matched_additional_requirements + '</td>'
	var td_match_points = '<td id="' + js_id + '-points" style="text-align:left;">' + js_data.match_points + '</td>'
//	var td_cv = '<td id="' + js_id + '-points" style="text-align:left;">' + js_data.match_points + '</td>'

	var row_as_html = tr_row_start;
	
	if (entity_type == 1) { // job
		row_as_html += s_link_start + td_images + s_link_end;
	} else if (entity_type == 2) { // job_seeker
		var s_link_start = '<a href="' + g_server_url + 'job_seeker/' + js_id + '/view">';
		var s_link_end = '</a>';
		var td_full_name = 
			'<td id="' + js_id + '-full_name" style="text-align:left;">' +
			s_link_start + js_data.full_name + s_link_end + '</td>'
		
		row_as_html += td_images + td_full_name;
	}
	
	row_as_html += 
		td_matched_skills + 
		td_matched_skills_details + 
		td_matched_additional_requirements + 
		td_match_points + 
		tr_row_end;
	
	return row_as_html;
}

function ajax_it(action, target_field_o) {
	if (!action) {
		return;
	}
	
	var h_ajax_data = eval("_REQ_" + action + "();");
	
	if (h_ajax_data) {
		
		if (h_ajax_data.action) {
			$.post(g_server_url + h_ajax_data.action, {
				json: JSON.stringify(h_ajax_data.data)}, callbackSuccess, "json");
			
		} else if (h_ajax_data.ajax_actions) {
			push_ajax_actions(h_ajax_data.ajax_actions);
			ajax_it(pop_ajax_action());
			
		} else {
			alert('AJAX ERROR: No ajax ACTION defined!');
		}
		
	}
}

function callbackSuccess(data, textStatus, jqXHR){
	if (!data) {
		alert('ERROR: No "data" object returned from server!');
		return;
	}
	
	var status_i = parseInt(data.status);
	
	if (status_i < 100) { // 0 - 100 are system-type error messages
		alert('ERROR: ' + data.status + ', ' + data.action + ', ' + data.message);
		return;
	} else {
		// --- Redirects, system calls and processing functionality (only if successful)
		if (status_i >= 100 && status_i < 200) { // form OR data related errors
			
			// 2. Update the error messages for the appropriate form fields
			switch (status_i) {
				case 100: // Field validation error
					for (var key in data.errors) {	
//						$("#" + key + "_error").html("'" + key + "' " + data.errors[key]);
						alert("'" + key + "' " + data.errors[key]);
					}
					
					if (data.message) {
						add_message("ERROR: " + data.message);
					}
					
					break;
			}
			
		} else { // No error
		
			// Messages
			if (data.message) {
				add_message(data.message);
			}
		
			eval("_RES_" + data.action + "(data, status_i);");
			
			// Execute the other 'ajax_actions' if they exist in the queue
			ajax_it(pop_ajax_action());
		}	
	}	
	
	
}

function toggle_register_as(obj) {
	var selection = $(obj).prev().attr('id');
	
	if (selection == 'radio1') {
		
	    $("#company_field").hide('slow');
	    $("#agency_field").hide('slow');
	    $("#organisation_role_field").hide('slow');
		
		$("#company_logo").hide('slow');
		$("#agency_logo").hide('slow');
		
		$("#user_type-id").attr("value", <%= Fs2User::USER_TYPES[:job_seeker] %>);
		
	} else if (selection == 'radio2') { // Recruitment agent
	
		$("#company_field").hide('slow');
		$("#agency_field").show('slow');
		$("#organisation_role_field").show('slow');
		
		$("#company_logo").hide('slow');
		$("#agency_logo").show('slow');
		
		$("#user_type-id").attr("value", <%= Fs2User::USER_TYPES[:recruitment_agent] %>);
		
	} else if (selection == 'radio3') { // Hiring manager
	
		$("#agency_field").hide('slow');
		$("#company_field").show('slow');	
		$("#organisation_role_field").show('slow');
		
		$("#company_logo").show('slow');
		$("#agency_logo").hide('slow');
		
		$("#user_type-id").attr("value", <%= Fs2User::USER_TYPES[:hiring_manager] %>);
		
	}
}

</script>